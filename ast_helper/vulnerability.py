from enum import Enum
from dataclasses import dataclass


class VulnerabilityLevel(Enum):
    """
    Enum of the severity levels corresponding to vulnerability type
    """
    low = 0
    moderate = 1
    high = 2


@dataclass
class VulnerabilityType:
    """
    Dataclass representing a type of vulnerability.
    """
    description: str
    fix: str = None
    level: VulnerabilityLevel = VulnerabilityLevel.high


class Vulnerability:
    """
    Class to represent a vulnerability. Class variables define the various vulnerability types.
    """
    djdebug = VulnerabilityType("Debug mode turned on. Dangerous to run in production as the app may output internal "
                                "details in case of errors, which can be used by attackers. More information: "
                                "https://docs.djangoproject.com/en/3.1/ref/settings/#debug",
                                "Set DEBUG to False in settings.py", VulnerabilityLevel.high)
    djsecmidw = VulnerabilityType("django.middleware.security.SecurityMiddleware is missing. It adds several security "
                                  "measures to the request/response cycle and not be omitted. More information: "
                                  "https://www.kite.com/python/docs/django.middleware.security.SecurityMiddleware",
                                  "Add django.middleware.security.SecurityMiddleware to MIDDLEWARE in settings.py",
                                  VulnerabilityLevel.moderate)
    djcsrfmidw = VulnerabilityType("django.middleware.csrf.CsrfViewMiddleware is missing. It blocks cross-site request "
                                  "forgery. More information: https://docs.djangoproject.com/en/2.2/ref/csrf/",
                                  "Add django.middleware.csrf.CsrfViewMiddleware to MIDDLEWARE in settings.py",
                                  VulnerabilityLevel.moderate)

    def __init__(self, file=None, lineno=None, vuln_type=None):
        self.file = file
        self.lineno = lineno
        self.vuln_type = vuln_type

    def __str__(self):
        str_repr = "Vulnerability found in file {0}".format(self.file)
        if self.lineno is not None:
            str_repr += " on line {0}".format(self.lineno)
        str_repr += ". Level of severity: {0}\n    Description: {1}\n    Fix: {2}"\
            .format(self.vuln_type.level.name, self.vuln_type.description, self.vuln_type.fix)
        return str_repr
