from analyzer.plugin_loader import call_with
from vulnerability.vulnerability import Vulnerability, VulnerabilityType, VulnerabilityLevel
import ast


cmdinj = VulnerabilityType("Possible Command Injection scenario. A function which starts a shell is\n    "
                          "called with something else than a string literal or a list of string \n    "
                          "literals. This may open your application to malicious code exection.",
                          "Use shlex.quote to wrap dynamic parameters",
                          VulnerabilityLevel.high)


@call_with("Call")
def check_call_for_cmdinj(self, node):
    """
    Example:
        adress = request.post["ip"]
        os.system("ping " + adress)
    """
    func_names = ["system", "popen"]
    lib_names = ["os", "posix"]
    if (hasattr(node.func, 'id') and node.func.id in func_names) or \
            (hasattr(node.func, 'attr') and node.func.attr in func_names and node.func.value.id in lib_names):
        if len(node.args) > 0:
            if all(isinstance(item, ast.Constant) for item in node.args):
                return  # string literal as argument
            if isinstance(node.args[0], ast.List) and all(isinstance(item, ast.Constant) for item in node.args[0].elts):
                return  # list of string literals as argument
            self.vulnerabilities.add(Vulnerability(file=self.file, lineno=node.lineno, vuln_type=cmdinj))