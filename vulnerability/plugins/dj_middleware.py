from analyzer.plugin_loader import call_with
from vulnerability.vulnerability import Vulnerability, VulnerabilityType, VulnerabilityLevel


djsecmidw = VulnerabilityType("django.middleware.security.SecurityMiddleware is missing. It adds\n    "
                              "several security measures to the request/response cycle and not be\n    "
                              "omitted. More information:\n    "
                              "https://www.kite.com/python/docs/django.middleware.security.SecurityMiddleware",
                              "Add django.middleware.security.SecurityMiddleware to MIDDLEWARE in settings.py",
                              VulnerabilityLevel.moderate)


djcsrfmidw = VulnerabilityType("django.middleware.csrf.CsrfViewMiddleware is missing. It blocks\n    "
                               "cross-site request forgery. More information:\n    "
                               "https://docs.djangoproject.com/en/2.2/ref/csrf/",
                               "Add django.middleware.csrf.CsrfViewMiddleware to MIDDLEWARE in settings.py",
                               VulnerabilityLevel.moderate)


@call_with("Assign")
def find_djmidw(self, node):
    if self.file.endswith("settings.py"):
        for target in node.targets:
            if target.id == "MIDDLEWARE":
                django_security_found = django_csrf_found = False
                for constant in node.value.elts:
                    if constant.value == "django.middleware.security.SecurityMiddleware":
                        django_security_found = True
                    if constant.value == "django.middleware.csrf.CsrfViewMiddleware":
                        django_csrf_found = True
                if not django_security_found:
                    self.vulnerabilities.add(Vulnerability(file=self.file, vuln_type=djsecmidw))
                if not django_csrf_found:
                    self.vulnerabilities.add(Vulnerability(file=self.file, vuln_type=djcsrfmidw))