from analyzer.plugin_loader import call_with
from vulnerability.vulnerability import Vulnerability, VulnerabilityType, VulnerabilityLevel


djxss = VulnerabilityType("Possible Cross-Site Request / HTML Injection scenario. The Django XSS\n    "
                          "protection is bypassed by using the django.utils.safestring.mark_safe \n    "
                          "function. More Information:\n    "
                          "https://docs.djangoproject.com/en/3.1/ref/utils/#module-django.utils.safestring",
                          "Use django.utils.html.format_html() for formatting HTML strings.",
                          VulnerabilityLevel.low)


@call_with("Call")
def check_call_for_djxss(self, node):
    """
    Example:
        html = f"<div>Hello {request.user}</div>"
        mark_safe(html)
    """
    if (hasattr(node.func, 'id') and node.func.id == "mark_safe") or \
            (hasattr(node.func, 'attr') and node.func.attr == "mark_safe"):
        self.vulnerabilities.add(Vulnerability(file=self.file, lineno=node.lineno, vuln_type=djxss))