from enum import Enum
from dataclasses import dataclass
import colorama

colorama.init()


class VulnerabilityLevel(Enum):
    """
    Enum of the severity levels corresponding to vulnerability type
    """
    low = 0
    moderate = 1
    high = 2


@dataclass
class VulnerabilityType:
    """
    Dataclass representing a type of vulnerability.
    """
    description: str
    fix: str = None
    level: VulnerabilityLevel = VulnerabilityLevel.high

    def __hash__(self):
        return hash(tuple(sorted(self.__dict__.items())))


class Vulnerability:
    """
    Class to represent a vulnerability.
    """
    def __init__(self, file=None, lineno=None, vuln_type=None):
        self.file = file
        self.lineno = lineno
        self.vuln_type = vuln_type

    def __eq__(self, other):
        if isinstance(other, Vulnerability):
            return self.file == other.file and self.lineno == other.lineno and self.vuln_type == other.vuln_type

    def __hash__(self):
        return hash(tuple(sorted(self.__dict__.items())))

    def __str__(self):
        # ANSI color codes
        HEADER = '\033[95m'
        RED = '\033[91m'
        CYAN = '\033[96m'
        YELLOW = "\033[93m"
        ENDCOLOR = '\033[0m'

        colored_level = self.vuln_type.level.name
        if self.vuln_type.level.name == "moderate":
            colored_level = YELLOW + self.vuln_type.level.name + ENDCOLOR
        elif self.vuln_type.level.name == "high":
            colored_level = RED + self.vuln_type.level.name + ENDCOLOR

        str_repr = HEADER + "Vulnerability found in file {0}".format(self.file)
        if self.lineno is not None:
            str_repr += " on line {0}".format(self.lineno)
        str_repr += ".{endcolor}\n    {cyan}Level of severity:{endcolor} {level}\n    {cyan}Description:{endcolor} " \
                    "{0}\n    {cyan}Fix:{endcolor} {1}" \
                    .format(self.vuln_type.description, self.vuln_type.fix,
                            endcolor=ENDCOLOR, cyan=CYAN, level=colored_level)
        return str_repr



